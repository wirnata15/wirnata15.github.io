{"version":3,"sources":["assets/bonk1.png","assets/bonk2.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["audio","Audio","App","useState","count","setCount","bonking","setBonking","addCount","e","preventDefault","play","releaseBonk","className","Grid","centered","Row","Column","largeScreen","widescreen","mobile","Image","src","Bonk2","Bonk1","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,MAA0B,kCCA1B,MAA0B,kC,kCCOnCA,EAAQ,IAAIC,MAAM,cAwCTC,EAtCC,WACd,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAW,SAACC,GAChBA,EAAEC,iBACFV,EAAMW,OACNJ,GAAW,GACXF,EAASD,EAAQ,IAEbQ,EAAc,SAACH,GACnBA,EAAEC,iBAGFH,GAAW,IAGb,OACE,sBAAKM,UAAU,MAAf,UACE,qBAAIA,UAAU,UAAd,2BAAuCT,KACvC,cAACU,EAAA,EAAD,CAAMC,UAAQ,EAAd,SACE,cAACD,EAAA,EAAKE,IAAN,UACE,cAACF,EAAA,EAAKG,OAAN,CAAaC,YAAa,EAAGC,WAAY,EAAGC,OAAQ,GAApD,SACE,cAACC,EAAA,EAAD,CACEC,IAAKhB,EAAUiB,EAAQC,EACvBC,aAAc,SAAChB,GAAD,OAAuBD,EAASC,IAC9CiB,WAAY,SAACjB,GAAD,OAAuBG,EAAYH,IAC/CkB,YAAa,SAAClB,GAAD,OAAuBD,EAASC,IAC7CmB,UAAW,SAACnB,GAAD,OAAuBG,EAAYH,IAC9CoB,OAAK,cCvBJC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.51f41e63.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bonk1.8ec3e402.png\";","export default __webpack_public_path__ + \"static/media/bonk2.0b2d4b08.png\";","import React, { FC, SyntheticEvent, useEffect, useRef, useState } from \"react\";\nimport Bonk1 from \"./assets/bonk1.png\";\nimport Bonk2 from \"./assets/bonk2.png\";\nimport \"./App.css\";\nimport { Howl, Howler } from \"howler\";\nimport { Grid, Image } from \"semantic-ui-react\";\n\nconst audio = new Audio(\"./bonk.mp3\");\n\nconst App: FC = () => {\n  const [count, setCount] = useState(0);\n  const [bonking, setBonking] = useState(false);\n  const addCount = (e: SyntheticEvent) => {\n    e.preventDefault();\n    audio.play();\n    setBonking(true);\n    setCount(count + 1);\n  };\n  const releaseBonk = (e: SyntheticEvent) => {\n    e.preventDefault();\n    // audio.pause();\n    // audio.currentTime = 0;\n    setBonking(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"counter\">Times Bonked: {count}</h1>\n      <Grid centered>\n        <Grid.Row>\n          <Grid.Column largeScreen={8} widescreen={8} mobile={10}>\n            <Image\n              src={bonking ? Bonk2 : Bonk1}\n              onTouchStart={(e: SyntheticEvent) => addCount(e)}\n              onTouchEnd={(e: SyntheticEvent) => releaseBonk(e)}\n              onMouseDown={(e: SyntheticEvent) => addCount(e)}\n              onMouseUp={(e: SyntheticEvent) => releaseBonk(e)}\n              fluid\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      {/* <div className=\"imageContainer\"></div> */}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}